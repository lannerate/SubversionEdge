/*
 * CollabNet Subversion Edge
 * Copyright (C) 2011, CollabNet Inc. All rights reserved.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.collabnet.svnedge.schema;

import java.sql.SQLException;
import java.util.List;

import org.apache.log4j.Logger;

public class MS004RepoTemplate implements MigrationScript {
    private Logger log = Logger.getLogger(getClass());

    public boolean migrate(SqlUtil db) throws SQLException {
        
        int[] version = {2,2,0};
        if (!db.isSchemaCurrent(version)) {
            String createTable = "CREATE MEMORY TABLE REPO_TEMPLATE (" +
                "ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1)" +
                "     NOT NULL PRIMARY KEY," +
                " VERSION BIGINT NOT NULL," +
                " NAME VARCHAR(255) NOT NULL," +
                " LOCATION VARCHAR(255) NOT NULL," +
                " DUMP_FILE BOOLEAN NOT NULL," +
                " ACTIVE BOOLEAN NOT NULL," +
                " DISPLAY_ORDER INTEGER NOT NULL," +
                " CONSTRAINT CTUQ_RT_NAME UNIQUE(NAME)," +
                " CONSTRAINT CTUQ_RT_LOCATION UNIQUE(LOCATION)" +
                ")";

            db.executeUpdate(createTable);
        }

        int[] version1 = {2,2,1};
        if (!db.isSchemaCurrent(version1)) {
            db.executeUpdate("insert into REPO_TEMPLATE " +
                    "(version, name, location, dump_file, active, display_order)" +
            " values (1, 'Empty repository', 'special1', false, true, 1)");
            db.executeUpdate("insert into REPO_TEMPLATE " +
                    "(version, name, location, dump_file, active, display_order)" +
                    " values (1, 'Create standard trunk/branches/tags structure'" +
            ", 'special2', false, true, 2)");
        }
        
        db.executeUpdate("update REPO_TEMPLATE set NAME = " + 
                "'l10n_repoTemplate.default.empty.label' where ID = 1");
        db.executeUpdate("update REPO_TEMPLATE set NAME = " + 
                "'l10n_repoTemplate.default.create.defaultDirs' where ID = 2");

        return false;
    }

    public int[] getVersion() {
        return new int[] {2,2,2};
    }
}

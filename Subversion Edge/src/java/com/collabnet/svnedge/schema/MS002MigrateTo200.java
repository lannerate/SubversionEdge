/*
 * CollabNet Subversion Edge
 * Copyright (C) 2011, CollabNet Inc. All rights reserved.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.collabnet.svnedge.schema;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.apache.log4j.Logger;

public class MS002MigrateTo200 implements MigrationScript {
    private Logger log = Logger.getLogger(getClass());

    public boolean migrate(SqlUtil db) throws SQLException {
        for (String sql : db.loadSql("MS002_migrate_to_200.sql")) {
            db.executeUpdate(sql);
        }

        List<String> serverColumns = db.getTableColumns("SERVER");
        if (!serverColumns.contains("APACHE_LOG_LEVEL")) {
            db.executeUpdateSql("alter table SERVER add column APACHE_LOG_LEVEL VARCHAR(255) default 'WARN' NOT NULL ");
        }
        if (!serverColumns.contains("CONSOLE_LOG_LEVEL")) {
            db.executeUpdateSql("alter table SERVER add column CONSOLE_LOG_LEVEL VARCHAR(255) default 'WARN' NOT NULL");
        }
        if (!serverColumns.contains("AUTH_HELPER_PORT")) {
            db.executeUpdateSql("alter table SERVER add column AUTH_HELPER_PORT INTEGER");
        }
        if (!serverColumns.contains("LDAP_ENABLED_CONSOLE")) {
            db.executeUpdateSql("alter table SERVER add column LDAP_ENABLED_CONSOLE BOOLEAN default false NOT NULL");
        }
        if (!serverColumns.contains("MODE")) {
            db.executeUpdateSql("alter table SERVER add column MODE VARCHAR(255) default 'STANDALONE' NOT NULL");
        }
        if (!serverColumns.contains("USE_SSL_CONSOLE")) {
            db.executeUpdateSql("alter table SERVER add column USE_SSL_CONSOLE BOOLEAN default false NOT NULL");
        }

        int maxUsernameLength = 31;
        ResultSet rs = db.executeQuery("select MAX(LENGTH(USERNAME)) from USER");
        if (rs.next()) {
            maxUsernameLength = rs.getInt(1);
        }
        if (maxUsernameLength < 31) {
            maxUsernameLength = 31;
        }
        db.executeUpdateSql("alter table USER alter column USERNAME VARCHAR(" + maxUsernameLength + ")");
      
        if (db.tableMissing("COMMAND_RESULT")) {
            db.executeUpdateSql("CREATE MEMORY TABLE COMMAND_RESULT (ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY, " +
                "VERSION BIGINT NOT NULL, COMMAND_CODE VARCHAR(255) NOT NULL, COMMAND_ID VARCHAR(255) NOT NULL, " +
                "DATE_CREATED TIMESTAMP NOT NULL, LAST_UPDATED TIMESTAMP NOT NULL, SUCCEEDED BOOLEAN, " +
                "TRANSMITTED BOOLEAN NOT NULL,CONSTRAINT CT_CMD_ID_UNIQUE UNIQUE(COMMAND_ID))");
        } else {
            List<String> columns = db.getTableColumns("COMMAND_RESULT");
            if (!columns.contains("COMMAND_CODE")) {
                db.executeUpdateSql("alter table COMMAND_RESULT add column COMMAND_CODE VARCHAR(255) set default '' NOT NULL");
            }
        }
        
        if (db.executeUpdate("CREATE MEMORY TABLE CTF_SERVER " +
                "(ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY, " +
                "VERSION BIGINT NOT NULL, BASE_URL VARCHAR(255) NOT NULL, " +
                "CTF_PASSWORD VARCHAR(255), CTF_USERNAME VARCHAR(255), " +
                "INTERNAL_API_KEY VARCHAR(255), MY_SYSTEM_ID VARCHAR(255), " +
                "CONSTRAINT CT_CTF_SYS_ID_UNIQUE UNIQUE(MY_SYSTEM_ID), " +
                "CONSTRAINT CT_CTF_BASE_URL_UNIQUE UNIQUE(BASE_URL), " +
                "CONSTRAINT CT_CTF_USERNAME_UNIQUE UNIQUE(CTF_USERNAME), " +
                "CONSTRAINT CT_CTF_API_KEY_UNIQUE UNIQUE(INTERNAL_API_KEY), " +
                "CONSTRAINT CT_CTF_PASSWORD_UNIQUE UNIQUE(CTF_PASSWORD))") < 0) {
            
            List<String > columns = db.getTableColumns("CTF_SERVER");
            if (!columns.contains("INTERNAL_API_KEY")) {
                db.executeUpdate("alter table CTF_SERVER add column INTERNAL_API_KEY VARCHAR(255)");
                db.executeUpdate("alter table CTF_SERVER add constraint CTUQ_CTF_API_KEY UNIQUE(INTERNAL_API_KEY)");
            }
            if (!columns.contains("CTF_USERNAME")) {
                db.executeUpdate("alter table CTF_SERVER add column CTF_USERNAME VARCHAR(255)");
                db.executeUpdate("alter table CTF_SERVER add constraint CTUQ_CTF_USERNAME UNIQUE(CTF_USERNAME)");
            }
            if (!columns.contains("CTF_PASSWORD")) {
                db.executeUpdate("alter table CTF_SERVER add column CTF_PASSWORD VARCHAR(255)");
                db.executeUpdate("alter table CTF_SERVER add constraint CTUQ_CTF_PASSWORD UNIQUE(CTF_PASSWORD)");
            }
        }
        return false;
    }

    public int[] getVersion() {
        return new int[] {2,0,0};
    }
}

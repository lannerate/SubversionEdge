/*
 * CollabNet Subversion Edge
 * Copyright (C) 2013, CollabNet Inc. All rights reserved.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.collabnet.svnedge.schema;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.apache.log4j.Logger;

public class MS019AddLogConfiguration implements MigrationScript {
    private Logger log = Logger.getLogger(getClass());

    public boolean migrate(SqlUtil db) throws SQLException {
        
        String createTable = "CREATE MEMORY TABLE LOG_CONFIGURATION(" +
                "ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) " +
                "  NOT NULL PRIMARY KEY, " +
                "VERSION BIGINT NOT NULL, " +
                "APACHE_LOG_LEVEL VARCHAR(255) default 'WARN' not null, " +
                "CONSOLE_LOG_LEVEL VARCHAR(255) default 'WARN' not null, " +
                "PRUNE_LOGS_OLDER_THAN INTEGER default 0 not null, " +
                "ENABLE_ACCESS_LOG BOOLEAN default true not null, " +
                "ENABLE_SUBVERSION_LOG BOOLEAN default true not null, " +
                "MINIMIZE_LOGGING BOOLEAN default false not null, " +
                "ENABLE_LOG_COMPRESSION BOOLEAN default false not null, " +
                "MAX_LOG_SIZE INTEGER default 0 not null" +
                ")";
        db.executeUpdateSql(createTable);
        
        String apacheLogLevel = "WARN";
        String consoleLogLevel = "WARN";
        int pruneLogsOlderThan = 0;
        ResultSet rs = db.executeQuery("select APACHE_LOG_LEVEL, " +
                "CONSOLE_LOG_LEVEL, PRUNE_LOGS_OLDER_THAN from SERVER " +
                "where ID=1");
        if (rs.next()) {
            apacheLogLevel = rs.getString(1);
            consoleLogLevel = rs.getString(2);
            pruneLogsOlderThan = rs.getInt(3);
        }

        db.executeUpdateSql("insert into LOG_CONFIGURATION (VERSION, " +
                "APACHE_LOG_LEVEL, CONSOLE_LOG_LEVEL, PRUNE_LOGS_OLDER_THAN) " +
                "values (0, '" + apacheLogLevel + "', '" + consoleLogLevel + 
                "', " + pruneLogsOlderThan + ")");

        db.executeUpdateSql("alter table SERVER drop column APACHE_LOG_LEVEL");
        db.executeUpdateSql("alter table SERVER drop column CONSOLE_LOG_LEVEL");
        db.executeUpdateSql("alter table SERVER drop column PRUNE_LOGS_OLDER_THAN");
        return false;
    }

    public int[] getVersion() {
        return new int[] {4,0,2};
    }
}

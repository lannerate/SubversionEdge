/*
 * CollabNet Subversion Edge
 * Copyright 2012, CollabNet Inc. All rights reserved.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.collabnet.svnedge.schema;

import java.sql.ResultSet;
import java.sql.SQLException;
import org.apache.log4j.Logger;

public class MS016AddGettingStartedWizard implements MigrationScript {
    private Logger log = Logger.getLogger(getClass());

    public boolean migrate(SqlUtil db) throws SQLException {
        
        int[] version = {3, 3, 0};
        if (!db.isSchemaCurrent(version)) {
            String createTable = "CREATE MEMORY TABLE WIZARD (" +
                "ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1)" +
                "     NOT NULL PRIMARY KEY," +
                " VERSION BIGINT default 0 NOT NULL," +
                " CURRENT_STEP_ID BIGINT," +
                " LABEL VARCHAR(64)," +
                " CONTROLLER VARCHAR(64)," +
                " DONE BOOLEAN default false NOT NULL," +
                " UPGRADE BOOLEAN default false NOT NULL," +
                " ACTIVE BOOLEAN default true NOT NULL," +
                " INITIALIZED BOOLEAN default false NOT NULL," +
                " ORDERED BOOLEAN default false NOT NULL" +
                //" USER_ID BIGINT" +
                ")";
            db.executeUpdate(createTable);

            createTable = "CREATE MEMORY TABLE WIZARD_STEP (" +
            "ID BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1)" +
            "     NOT NULL PRIMARY KEY," +
            " VERSION BIGINT default 0 NOT NULL," +
            " WIZARD_ID BIGINT NOT NULL," +
            " LABEL VARCHAR(64)," +
            " HELPER_CLASS_NAME VARCHAR(255)," +
            " RANK INTEGER NOT NULL," +
            " DONE BOOLEAN default false NOT NULL," +
            " CONSTRAINT FKC_WIZ_WIZ_STEP FOREIGN KEY(WIZARD_ID)" +
            " REFERENCES WIZARD(ID)" +
            ")";
            db.executeUpdate(createTable);
        
        db.executeUpdate("insert into WIZARD (LABEL, CONTROLLER, ACTIVE, ORDERED) " +
                "values ('GettingStarted', 'gettingStarted', true, true)");
        
        String insertPrefix = "insert into WIZARD_STEP " + 
                "(WIZARD_ID, LABEL, HELPER_CLASS_NAME, RANK) values ";
        db.executeUpdate(insertPrefix +
                "(1, 'ChangePassword', 'com.collabnet.svnedge.wizard.gettingstarted.ChangePasswordStep', 1)");
        db.executeUpdate(insertPrefix +
                "(1, 'ServerSettings', 'com.collabnet.svnedge.wizard.gettingstarted.ServerSettingsStep', 2)");
        db.executeUpdate(insertPrefix +
                "(1, 'CloudBackup', 'com.collabnet.svnedge.wizard.gettingstarted.CloudBackupStep', 3)");
        
            db.updateSchemaVersion(version, getClass().getSimpleName() + " added WIZARD and WIZARD_STEP");
        }
        
        version[2] = 1;
        if (!db.isSchemaCurrent(version)) {
            db.executeUpdate("alter table WIZARD add column HELPER_CLASS_NAME VARCHAR(255)");
            db.executeUpdate("update WIZARD set HELPER_CLASS_NAME=" + 
                    "'com.collabnet.svnedge.wizard.gettingstarted.GettingStartedWizard'" + 
                    " where LABEL='GettingStarted'");
            db.executeUpdate("alter table WIZARD drop column CONTROLLER");
            db.executeUpdate("alter table WIZARD drop column LABEL");
            db.updateSchemaVersion(version, getClass().getSimpleName() + " modified WIZARD");
        }
        
        version[2] = 2;
        if (!db.isSchemaCurrent(version)) {        
            try {

            boolean isWizardDone = true;
            ResultSet rs = db.executeQuery("select count(*) from USER");
            rs.next();
            if (rs.getInt(1) == 0) {
                isWizardDone = false;
            } else {
                rs = db.executeQuery("select PASSWD from USER where USERNAME='admin'");
                if (rs.next()) {
                    if ("21232f297a57a5a743894a0e4a801fc3".equals(rs.getString(1))) {
                        isWizardDone = false;
                    } else {
                        db.executeUpdate("update WIZARD_STEP set DONE=true where LABEL in ('ChangePassword', 'ServerSettings')");
                    }
                } else {
                    throw new RuntimeException("No user by the name 'admin'");
                }
                rs.close();
                rs = db.executeQuery("select DOMAIN from CLOUD_SERVICES_CONFIGURATION");
                rs.next();
                String domain = rs.getString(1);
                if (domain == null || domain.trim().length() == 0) {
                    isWizardDone = false;
                } else {
                    db.executeUpdate("update WIZARD_STEP set DONE=true where LABEL='CloudBackup'");
                }
            }
            
            if (isWizardDone) {
                db.executeUpdate("update WIZARD set ACTIVE=false, DONE=true");                
            }

            } catch (Exception e) {
                log.warn("Exception occurred while checking for prior " + 
                        "completion of Getting Started steps. This is not fatal, " + 
                        "but you might send the stacktrace to users-svnedge@ctf.open.collab.net", e);
            }
        }

        return false;
    }

    public int[] getVersion() {
        return new int[] {3, 3, 2};
    }
}
